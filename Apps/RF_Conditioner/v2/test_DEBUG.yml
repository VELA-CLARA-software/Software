##  __   ___     __   __        __    ___    __               __  
## |__) |__     /  ` /  \ |\ | |  \ |  |  | /  \ |\ | | |\ | / _` 
## |  \ |       \__, \__/ | \| |__/ |  |  | \__/ | \| | | \| \__> 
##                                                               
## CONFIG FILE VERSION 2.0, djs
##
## Only change this file if you know what you are doing,
## 
## This is a YAML file, https:  //yaml.org
## YAML:  YAML Ain't Markup Language
## YAML is our standard filetype for configuration settings, 
##
## This file contains configuration settings for RF conditioning the app (NO-ARC) 
## rf condition config 
## simple guide to yaml format 
## single # comments (doesn't always work, e.g. after string definition) 
## NEVER USE A TAB when defining data, uses spaces to indent list values and strings 
## general format is:  
## key:  value  ## At least one space character after the colon IS MANDATORY
## To denote a list of values, define name of list, then colon, 
## add each element by starting on a newline with two spaces dash one space,  
## The two spaces dash one sapce is MANDATORY!!! 
## entries are interpreted as strings UNLESS they are a number, 
## numbers will be interpreted as numbers 
## MYLIST:  
##   - LIST_ITEM1   #two spaces then dash, denotes list
##   - LIST_ITEM2   #two spaces then dash, denotes list
## Multiline String Values, string starts on newline with two spaces,   
## MYSTRING:  >          
##   string1 literal   
##   string2 literal  
## 
## The reader needs to know all keys
## for values:  
## at a minimum how to convert to numbers etc
## FLOAT numbers MUST have a decimal point, 
## INTEGER numbers MUST NOT have a decimal point, 
## i.e:  2   is an integer, and will be read as such  
## i.e:  2.0 is a  float,   and will be read as such  
##
## the RF trace shorthand naming scheme
## KRPOW => "KLYSTRON_REVERSE_POWER"
## KRPHA => "KLYSTRON_REVERSE_PHASE"
## KFPOW => "KLYSTRON_FORWARD_POWER"
## KFPHA => "KLYSTRON_FORWARD_PHASE"
## CRPOW => "CAVITY_REVERSE_POWER"
## CRPHA => "CAVITY_REVERSE_PHASE"
## CPPOW => "CAVITY_PROBE_POWER"
## CPPHA => "CAVITY_PROBE_PHASE"
## CFPOW => "CAVITY_FORWARD_POWER"
## CFPHA => "CAVITY_FORWARD_PHASE"
## 

# MODE - DEBUG or OPERATIONAL
# IF in DEBUG  mode, we will NEVER change a setting, BUT it will monitor values (?) 
MODE: DEBUG

#  The name of the RF structure, as used in CATAP
RF_STRUCTURE: CLARA_LRRG # STRING



## main param
#TIME_BETWEEN_RF_INCREASES :  10;seconds
#RF_INCREASE_LEVEL=0.001;kw (KLYSTRON FORWARD POWER ESTIMATE)

DEFAULT_RF_INCREASE_LEVEL:  10  # INTEGER LLRF units
DEFAULT_PULSE_COUNT:  150 # INTEGER, How many pulses to wait before the next ramp 
MAX_DELTA_AMP_SP :  50 #; maximum setpoint increase allowed, no matter what the fitting says INTEGER

NUM_SET_POINTS_TO_FIT:  20 # how many setpoints to fit when predicted then next setpoint


MINIMUM_COOLDOWN_TIME: 3000 # INTEGER, minimum time in ms that a state (Vac spike, outside mask event) can be BAD for 

#POWER_AIM= 0.1; MW watts
#PULSE_LENGTH_START=100; ns !! NOT us
PULSE_LENGTH   : 2500 #; ns  !! NOT us
PULSE_LENGTH_ERROR : 50 #; ns  !! NOT us
#PULSE_LENGTH_STEP= 250; ns !! NOT us


RF_REPETITION_RATE:  10 # INTEGER Hertz
RF_REPETITION_RATE_ERROR:  3 #difference in Hertz from RF_REPETITION_RATE that is acceptable


BREAKDOWN_RATE_AIM:  100 # per million active pulses

LLRF_CHECK_TIME:  50 # INTEGER ms to check main llrf parameters

#RF_INCREASE_RATE=0.33333; Watts per second aim (approx)
#NORMAL_POWER_INCREASE=10000;Watts normalstep size
#LOW_POWER_INCREASE=1000;Watts, step size at low power
#LOW_POWER_INCREASE_RATE_LIMIT=1000000;Watts. definition of low/normal power for _POWER_INCREASE tags
NUMBER_OF_PULSES_IN_BREAKDOWN_HISTORY:  1000000 #how many pulses to count 
NUM_BUFFER_TRACES:  500 # number of traces in history, dumped on vac-spike

## Traces to calculate a mean value for 
## currently only 1 mean calc per trace is allowed
## ONLY The traces in this list will have a mean value calculated
## regardless of the time definitions below  
MEAN_TRACES:  
  - KLYSTRON_FORWARD_POWER
  - KLYSTRON_REVERSE_POWER
  - CAVITY_FORWARD_POWER
  - CAVITY_REVERSE_POWER
 # - CAVITY_PROBE_POWER
  - KLYSTRON_FORWARD_PHASE
  - KLYSTRON_REVERSE_PHASE
  - CAVITY_FORWARD_PHASE
  - CAVITY_REVERSE_PHASE
 # - CAVITY_PROBE_PHASE
## start and end times for trace mean calculation, FLOAT in micro-seconds, 
## ATM: MUST BE SET BY HAND FOR EACH PULSE LENGTH, using RF traces, 
# only a human can decide over which range to calculate and average 
## KLYSTRON_FORWARD_POWER 
KFPOW_MEAN_START:  2.3 # must be in us
KFPOW_MEAN_END:  2.8  # must be in us
## KLYSTRON_REVERSE_POWER
KRPOW_MEAN_START:  2.5  # must be in us
KRPOW_MEAN_END:  3.0 # must be in us
## CAVITY_FORWARD_POWER
CFPOW_MEAN_START:  2.9  # must be in us
CFPOW_MEAN_END:  3.1  # must be in us
## CAVITY_REVERSE_POWER
CRPOW_MEAN_START:  2.9  # must be in us
CRPOW_MEAN_END:  3.1 # must be in us
## KLYSTRON_FORWARD_PHASE 
KFPHA_MEAN_START:  2.3 # must be in us
KFPHA_MEAN_END:  2.75 # must be in us
## KLYSTRON_REVERSE_POWER
KRPHA_MEAN_START:  2.5 # must be in us
KRPHA_MEAN_END:  3.0 # must be in us
## CAVITY_FORWARD_PHASE
CFPHA_MEAN_START:  0.0 # must be in us
CFPHA_MEAN_END:  2.0  # must be in us
## CAVITY_REVERSE_PHASE
CRPHA_MEAN_START:  2.8  # must be in us
CRPHA_MEAN_END:  3.0 # must be in us
## CAVITY_PROBE_POWER
CPPOW_MEAN_START:  0.0  # must be in us
CPPOW_MEAN_END:  2.0  # must be in us
## CAVITY_PROBE_PHASE
CPPHA_MEAN_START:  0.0 # must be in us
CPPHA_MEAN_END:  2.0  # must be in us

## breakdown / outside_mask traces
##BREAKDOWN_TRACES=CAVITY_FORWARD_POWER,CAVITY_REVERSE_POWER;
BREAKDOWN_TRACES:  CAVITY_REVERSE_PHASE

OUTSIDE_MASK_CHECK_TIME: 100 #INTEGER ms between outside_mask_trace checks, THIS IS FOR THE GUI, the c++ llrf module is checking every pulse 
TRACES_TO_SAVE:  # specify traces to save breakdown data#
  - KLYSTRON_FORWARD_PHASE
  - KLYSTRON_REVERSE_PHASE
  - KLYSTRON_FORWARD_POWER
  - KLYSTRON_REVERSE_POWER
  - CAVITY_REVERSE_PHASE
  - CAVITY_FORWARD_PHASE
  - CAVITY_FORWARD_POWER
  - CAVITY_REVERSE_POWER
  #- CAVITY_PROBE_POWER
  #- CAVITY_PROBE_POWER



# WHAT EXTRA VLAUES TO SAVE ON BREAKDWON - SHOULD THI SBE CONFIGURABLE???
EXTRA_BREAKDOWN_DAQ:  # ; has to go in python source code NOT IMPLEMENTED YET
  - VAC_LEVEL
  - DC_LEVEL
  - BREAKDOWN_RATE
  - BREAKDOWN_COUNT

OUTSIDE_MASK_COOLDOWN_TIME: 3000 # INTEGER,  cooldown time in milliseconds
EXTRA_TRACES_ON_BREAKDOWN: 2 # INTEGER number of extra (subsequent) traces to save after an out_side_mask_trace is detected
KLY_PWR_FOR_ACTIVE_PULSE: 500.0 # FLOAT, min kyl fwd power to enable incrementing the RF pulse counter (in Watts)

## CAVITY FORWARD POWER  MASK PARAMETERS
CFPOW_AUTO_SET: false #;Will pick mask indices automatically, if false YOU must Define Them
CFPOW_MASK_SET_TYPE: INDEX #; (TIME or INDEX) for CRP_AUTO_SET=FALSE manually set s1,s2,s3,s4, via TIME in trace or INDEX in trace
CFPOW_MASK_START: 57 #Only used if CRP_AUTO_SET=FALSE
CFPOW_MASK_END: 179 #;Only used if CRP_AUTO_SET=FALSE
CFPOW_MASK_WINDOW_START: 301 #;Only used if CRP_AUTO_SET=FALSE
CFPOW_MASK_WINDOW_END: 302 #;Only used if CRP_AUTO_SET=FALSE
CFPOW_MASK_TYPE: PERCENT #; PERCENT OR ABSOLUTE
CFPOW_MASK_ABS_MIN: 50 # integer,Minimum value for a mask, regardless
CFPOW_MASK_LEVEL: 30 #integer,units depend on CFP_MASK_TYPE
CFPOW_CHECK_STREAK: 10 #how many continuous points outside mask
CFPOW_MASK_FLOOR: 50 #Watts, values below this won't get checked
CFPOW_MASK_MIN: 50 #Watts, values below this won't get checked
CFPOW_NUM_AVERAGE_TRACES: 5
CFPOW_DROP_AMP: false #
CFPOW_DROP_AMP_VALUE: 6


## CAVITY REFLECTED POWER/PHASE MASK PARAMETERS
CRPOW_AUTO_SET:  false #;Will pick mask indices automatically, if false YOU must Define Them
CRPOW_MASK_SET_TYPE:  TIME #(TIME or INDEX) for CRP_AUTO_SET=FALSE manually set s1,s2,s3,s4, via TIME in trace or INDEX in trace
CRPOW_MASK_START:  0.8 # Only used if CRP_AUTO_SET=FALSE
CRPOW_MASK_WINDOW_START:  2.4 # Only used if CRP_AUTO_SET=FALSE
CRPOW_MASK_WINDOW_END:  3.4 # Only used if CRP_AUTO_SET=FALSE
CRPOW_MASK_END:  5.0 # Only used if CRP_AUTO_SET=FALSE
CRPOW_MASK_ABS_MIN:  50  # integer,Minimum value for a mask, regardless
CRPOW_MASK_TYPE:  ABSOLUTE # ABSOLUTE OR PERCENT, mask type is to set the mask based on a percentage of previous values, or by absolute amount 
CRPOW_NUM_AVERAGE_TRACES:  2 # 
CRPOW_CHECK_STREAK :  2 # how many continuous points outside mask required to trigger event
CRPOW_DROP_AMP_VALUE :  2 # value to drop RF amplitude to on event detection (LLRF UNITS)
CRPOW_MASK_LEVEL :  35 # units depend on CRP_MASK_TYPE
CRPOW_MASK_FLOOR :  0.0 # values below this won't get checked
CRPOW_MASK_END :  4.8 # ms from end of RF pulse
CRPOW_DROP_AMP :  false # should drop amplitude on event detection?

## CAVITY PROBE POWER MASK PARAMETERS
CPPOW_AUTO_SET:  false #;Will pick mask indices automatically, if false YOU must Define Them
CPPOW_MASK_SET_TYPE:  TIME #(TIME or INDEX) for CRP_AUTO_SET=FALSE manually set s1,s2,s3,s4, via TIME in trace or INDEX in trace
CPPOW_MASK_START:  0.8 # Only used if CRP_AUTO_SET=FALSE
CPPOW_MASK_WINDOW_START:  2.4 # Only used if CRP_AUTO_SET=FALSE
CPPOW_MASK_WINDOW_END:  3.4 # Only used if CRP_AUTO_SET=FALSE
CPPOW_MASK_END:  5.0 # Only used if CRP_AUTO_SET=FALSE
CPPOW_MASK_ABS_MIN:  50  # integer,Minimum value for a mask, regardless
CPPOW_MASK_TYPE:  ABSOLUTE # ABSOLUTE OR PERCENT, mask type is to set the mask based on a percentage of previous values, or by absolute amount
CPPOW_NUM_AVERAGE_TRACES:  2 #
CPPOW_CHECK_STREAK:  2 # how many continuous points outside mask required to trigger event
CPPOW_DROP_AMP_VALUE:  2 # value to drop RF amplitude to on event detection (LLRF UNITS)
CPPOW_MASK_LEVEL:  35 # units depend on CRP_MASK_TYPE
CPPOW_MASK_FLOOR:  0.0 # values below this won't get checked
CPPOW_MASK_END:  4.8 # ms from end of RF pulse
CPPOW_DROP_AMP:  false # should drop amplitude on event detection?

## klystron REFLECTED POWER  MASK PARAMETERS
KRPOW_AUTO_SET:  false #;Will pick mask indices automatically, if false YOU must Define Them
KRPOW_MASK_SET_TYPE:  TIME #(TIME or INDEX) for CRP_AUTO_SET=FALSE manually set s1,s2,s3,s4, via TIME in trace or INDEX in trace
KRPOW_MASK_START:  0.8 # Only used if CRP_AUTO_SET=FALSE
KRPOW_MASK_WINDOW_START:  2.4 # Only used if CRP_AUTO_SET=FALSE
KRPOW_MASK_WINDOW_END:  3.4 # Only used if CRP_AUTO_SET=FALSE
KRPOW_MASK_END:  5.0 # Only used if CRP_AUTO_SET=FALSE
KRPOW_MASK_ABS_MIN:  50  # integer,Minimum value for a mask, regardless
KRPOW_MASK_TYPE:  ABSOLUTE # ABSOLUTE OR PERCENT, mask type is to set the mask based on a percentage of previous values, or by absolute amount 
KRPOW_NUM_AVERAGE_TRACES:  2 # 
KRPOW_CHECK_STREAK:  2 # how many continuous points outside mask required to trigger event
KRPOW_DROP_AMP_VALUE:  2 # value to drop RF amplitude to on event detection (LLRF UNITS)
KRPOW_MASK_LEVEL:  35 # units depend on CRP_MASK_TYPE
KRPOW_MASK_FLOOR:  0.0 # values below this won't get checked
KRPOW_MASK_END:  4.8 # ms from end of RF pulse 
KRPOW_DROP_AMP:  false # should drop amplitude on event detection?

## klystron REFLECTED POWER/PHASE MASK PARAMETERS
KFPOW_AUTO_SET:  false #;Will pick mask indices automatically, if false YOU must Define Them
KFPOW_MASK_SET_TYPE:  TIME #(TIME or INDEX) for CRP_AUTO_SET=FALSE manually set s1,s2,s3,s4, via TIME in trace or INDEX in trace
KFPOW_MASK_START:  0.8 # Only used if CRP_AUTO_SET=FALSE
KFPOW_MASK_WINDOW_START:  2.4 # Only used if CRP_AUTO_SET=FALSE
KFPOW_MASK_WINDOW_END:  3.4 # Only used if CRP_AUTO_SET=FALSE
KFPOW_MASK_END:  5.0 # Only used if CRP_AUTO_SET=FALSE
KFPOW_MASK_ABS_MIN:  50  # integer,Minimum value for a mask, regardless
KFPOW_MASK_TYPE:  ABSOLUTE # ABSOLUTE OR PERCENT, mask type is to set the mask based on a percentage of previous values, or by absolute amount 
KFPOW_NUM_AVERAGE_TRACES:  2 # 
KFPOW_CHECK_STREAK:  2 # how many continuous points outside mask required to trigger event
KFPOW_DROP_AMP:  false # should drop amplitude on event detection?
KFPOW_DROP_AMP_VALUE:  2 # value to drop RF amplitude to on event detection (LLRF UNITS)
KFPOW_MASK_LEVEL:  35 # units depend on CRP_MASK_TYPE
KFPOW_MASK_FLOOR:  0.0 # values below this won't get checked
KFPOW_MASK_END:  4.8 # ms from end of RF pulse 

## CAVITY FORWARD POWER  MASK PARAMETERS
CFPHA_AUTO_SET:  false #;Will pick mask indices automatically, if false YOU must Define Them
CFPHA_MASK_SET_TYPE:  TIME #(TIME or INDEX) for CRP_AUTO_SET=FALSE manually set s1,s2,s3,s4, via TIME in trace or INDEX in trace
CFPHA_MASK_START:  0.8 # Only used if CRP_AUTO_SET=FALSE
CFPHA_MASK_WINDOW_START:  2.4 # Only used if CRP_AUTO_SET=FALSE
CFPHA_MASK_WINDOW_END:  3.4 # Only used if CRP_AUTO_SET=FALSE
CFPHA_MASK_END:  5.0 # Only used if CRP_AUTO_SET=FALSE
CFPHA_MASK_ABS_MIN:  50  # integer,Minimum value for a mask, regardless
CFPHA_MASK_TYPE:  ABSOLUTE # ABSOLUTE OR PERCENT, mask type is to set the mask based on a percentage of previous values, or by absolute amount 
CFPHA_NUM_AVERAGE_TRACES:  2 # 
CFPHA_CHECK_STREAK:  2 # how many continuous points outside mask required to trigger event
CFPHA_DROP_AMP_VALUE:  2 # value to drop RF amplitude to on event detection (LLRF UNITS)
CFPHA_MASK_LEVEL:  35 # units depend on CRP_MASK_TYPE
CFPHA_MASK_FLOOR:  0.0 # values below this won't get checked
CFPHA_MASK_END:  4.8 # ms from end of RF pulse 
CFPHA_DROP_AMP:  false # should drop amplitude on event detection?
# Was implemented, then taken out, so needs re-implementing and CHECKING, 
# This feature allows the end of the phase mask to be set to the index of the 
# corresponding power_trace value, (when going from late in the pulse to early)
CFPHA_PHASE_MASK_BY_POWER_TRACE:  false # 
CFPHA_PHASE_MASK_BY_POWER_LEVEL:  5000.0 # Watts, set the end of the phase mask to be at the index for this  (going from late to early in th epulse)


## CAVITY REFLECTED POWER/PHASE MASK PARAMETERS
CRPHA_AUTO_SET:  false #Will pick mask indices automatically, if false YOU must Define Them
CRPHA_MASK_SET_TYPE:  TIME #(TIME or INDEX) for CRP_AUTO_SET=FALSE manually set s1,s2,s3,s4, via TIME in trace or INDEX in trace
CRPHA_MASK_START:  0.8 # Only used if CRP_AUTO_SET=FALSE
CRPHA_MASK_WINDOW_START:  2.4 # Only used if CRP_AUTO_SET=FALSE
CRPHA_MASK_WINDOW_END:  3.4 # Only used if CRP_AUTO_SET=FALSE
CRPHA_MASK_END:  5.0 # Only used if CRP_AUTO_SET=FALSE
CRPHA_MASK_ABS_MIN:  50  # integer,Minimum value for a mask, regardless
CRPHA_MASK_TYPE:  ABSOLUTE # ABSOLUTE OR PERCENT, mask type is to set the mask based on a percentage of previous values, or by absolute amount 
CRPHA_NUM_AVERAGE_TRACES:  2 # 
CRPHA_CHECK_STREAK:  2 # how many continuous points outside mask required to trigger event
CRPHA_DROP_AMP_VALUE:  2 # value to drop RF amplitude to on event detection (LLRF UNITS)
CRPHA_MASK_LEVEL:  35 # units depend on CRP_MASK_TYPE
CRPHA_MASK_FLOOR:  0.0 # values below this won't get checked
CRPHA_MASK_END:  4.8 # ms from end of RF pulse 
CRPHA_DROP_AMP:  false # should drop amplitude on event detection?
CRPHA_PHASE_MASK_BY_POWER_TRACE:  false # 
CRPHA_PHASE_MASK_BY_POWER_LEVEL:  5000.0 # Watts, set the end of the phase mask to be at the index for this  (going from late to early in th epulse)


## CAVITY PROBE PHASE  MASK PARAMETERS THESE HAVE TO BE DEFINED!!!! even if not used
CPPHA_AUTO_SET:  false #;Will pick mask indices automatically, if false YOU must Define Them
CPPHA_MASK_SET_TYPE:  TIME #(TIME or INDEX) for CRP_AUTO_SET=FALSE manually set s1,s2,s3,s4, via TIME in trace or INDEX in trace
CPPHA_MASK_START:  0.8 # Only used if CRP_AUTO_SET=FALSE
CPPHA_MASK_WINDOW_START:  2.4 # Only used if CRP_AUTO_SET=FALSE
CPPHA_MASK_WINDOW_END:  3.4 # Only used if CRP_AUTO_SET=FALSE
CPPHA_MASK_END:  5.0 # Only used if CRP_AUTO_SET=FALSE
CPPHA_MASK_ABS_MIN:  50  # integer,Minimum value for a mask, regardless
CPPHA_MASK_TYPE:  ABSOLUTE # ABSOLUTE OR PERCENT, mask type is to set the mask based on a percentage of previous values, or by absolute amount
CPPHA_NUM_AVERAGE_TRACES:  2 #
CPPHA_CHECK_STREAK:  2 # how many continuous points outside mask required to trigger event
CPPHA_DROP_AMP_VALUE:  2 # value to drop RF amplitude to on event detection (LLRF UNITS)
CPPHA_MASK_LEVEL:  35 # units depend on CRP_MASK_TYPE
CPPHA_MASK_FLOOR:  0.0 # values below this won't get checked
CPPHA_MASK_END:  4.8 # ms from end of RF pulse
CPPHA_DROP_AMP:  false # should drop amplitude on event detection?
CPPHA_PHASE_MASK_BY_POWER_TRACE:  false #
CPPHA_PHASE_MASK_BY_POWER_LEVEL:  5000.0 # Watts, set the end of the phase mask to be at the index for this  (going from late to early in th epulse)


## klystron REFLECTED POWER  MASK PARAMETERS
KRPHA_AUTO_SET:  false #;Will pick mask indices automatically, if false YOU must Define Them
KRPHA_MASK_SET_TYPE:  TIME #(TIME or INDEX) for CRP_AUTO_SET=FALSE manually set s1,s2,s3,s4, via TIME in trace or INDEX in trace
KRPHA_MASK_START:  0.8 # Only used if CRP_AUTO_SET=FALSE
KRPHA_MASK_WINDOW_START:  2.4 # Only used if CRP_AUTO_SET=FALSE
KRPHA_MASK_WINDOW_END:  3.4 # Only used if CRP_AUTO_SET=FALSE
KRPHA_MASK_END:  5.0 # Only used if CRP_AUTO_SET=FALSE
KRPHA_MASK_ABS_MIN:  50  # integer,Minimum value for a mask, regardless
KRPHA_MASK_TYPE:  ABSOLUTE # ABSOLUTE OR PERCENT, mask type is to set the mask based on a percentage of previous values, or by absolute amount 
KRPHA_NUM_AVERAGE_TRACES:  2 # 
KRPHA_CHECK_STREAK:  2 # how many continuous points outside mask required to trigger event
KRPHA_DROP_AMP_VALUE:  2 # value to drop RF amplitude to on event detection (LLRF UNITS)
KRPHA_MASK_LEVEL:  35 # units depend on CRP_MASK_TYPE
KRPHA_MASK_FLOOR:  0.0 # values below this won't get checked
KRPHA_MASK_END:  4.8 # ms from end of RF pulse 
KRPHA_DROP_AMP:  false # should drop amplitude on event detection?
KRPHA_PHASE_MASK_BY_POWER_TRACE:  false # 
KRPHA_PHASE_MASK_BY_POWER_LEVEL:  5000.0 # Watts, set the end of the phase mask to be at the index for this  (going from late to early in th epulse)


## klystron REFLECTED POWER/PHASE MASK PARAMETERS
KFPHA_AUTO_SET:  false #;Will pick mask indices automatically, if false YOU must Define Them
KFPHA_MASK_SET_TYPE:  TIME #(TIME or INDEX) for CRP_AUTO_SET=FALSE manually set s1,s2,s3,s4, via TIME in trace or INDEX in trace
KFPHA_MASK_START:  0.8 # Only used if CRP_AUTO_SET=FALSE
KFPHA_MASK_WINDOW_START:  2.4 # Only used if CRP_AUTO_SET=FALSE
KFPHA_MASK_WINDOW_END:  3.4 # Only used if CRP_AUTO_SET=FALSE
KFPHA_MASK_END:  5.0 # Only used if CRP_AUTO_SET=FALSE
KFPHA_MASK_ABS_MIN:  50  # integer,Minimum value for a mask, regardless
KFPHA_MASK_TYPE:  ABSOLUTE # ABSOLUTE OR PERCENT, mask type is to set the mask based on a percentage of previous values, or by absolute amount 
KFPHA_NUM_AVERAGE_TRACES:  2 # 
KFPHA_CHECK_STREAK:  2 # how many continuous points outside mask required to trigger event
KFPHA_DROP_AMP:  false # should drop amplitude on event detection?
KFPHA_DROP_AMP_VALUE:  2 # value to drop RF amplitude to on event detection (LLRF UNITS)
KFPHA_MASK_LEVEL:  35 # units depend on CRP_MASK_TYPE
KFPHA_MASK_FLOOR:  0.0 # values below this won't get checked
KFPHA_MASK_END:  4.8 # ms from end of RF pulse 
KFPHA_PHASE_MASK_BY_POWER_TRACE:  false # 
KFPHA_PHASE_MASK_BY_POWER_LEVEL:  5000.0 # Watts, set the end of the phase mask to be at the index for this  (going from late to early in th epulse)





## output
TEXT_LOG_FILENAME:  log.txt # general messages
#LOG_DIRECTORY:  D:  \VELA\GIT Projects\Software\Apps\RF_Conditioner\logs_l01_test\
##LOG_DIRECTORY:   "C:  \Users\dlerlp\Documents\RF_condition_2018\logs_clara_lrrg\"; breakdown data
##LOG_DIRECTORY:   "D:  \VELA\GIT Projects\Software\Apps\RF_Conditioner\logs_clara_lrrg\"
#LOG_DIRECTORY: C:\Users\dlerlp\Documents\GitHub\Software\Apps\RF_Conditioner\v2\logs\
LOG_DIRECTORY: C:\Users\djs56\GitHub\Software\Apps\RF_Conditioner\v2\logs\
OUTSIDE_MASK_FORWARD_FILENAME:  outside_forward_log
OUTSIDE_MASK_REVERSE_FILENAME:  outside_reverse_log
OUTSIDE_MASK_PROBE_FILENAME:  outside_probe_log
BINARY_DATA_LOG_FILENAME:  data_log # general data
BINARY_DATA_LOG_TIME:  1000 # millseconds between logging data
AMP_PWR_LOG_TIME:  50 # ms between logging data

#history of (periodic) pulse count and (all) breakdown events, used to provide continuity for day-to-day running
PULSE_COUNT_BREAKDOWN_LOG_FILENAME:  pulse_breakdown_log.txt 
#KFPOW_AMPSP_RUNNING_STATS_LOG_FILENAME:  amp_power_log.txt
KFPOW_AMPSP_RUNNING_STATS_LOG_FILENAME:  amp_power_log.txt

## Vacuum parameters
VAC_PV:  CLA-LRG1-VAC-IMG-01:P
VAC_SPIKE_DELTA:  0.0000004 # 4e-7
# Decay mode is TIMED or LEVEL, if LEVEL then set VAC_SPIKE_DECAY_LEVEL
# a lvel decay means wait until the desitred level is reached after an event, before setting the "vacuum_good" state
# a timed decay will wait the set amount of tim ebefore setting "vacuum_good" 
VAC_DECAY_MODE:  LEVEL
VAC_SPIKE_DECAY_LEVEL:  1.2 # float, the level is a factor applied to the previous mean value, above which the vac_alarm stays bad
VAC_SPIKE_DECAY_TIME:  2000 # ms only used if VAC_DECAY_MODE = TIME
VAC_NUM_SAMPLES_TO_AVERAGE:  7 # integer, numer of samples over which to calcualte the rolling mean
VAC_ROLLING_SUM_NUM_SAMPLES:  25 # We will keep a rolling sum of the vacuum level, which may help us in the future with generating an "adaptive ramp" based on vac activity 
VAC_CHECK_TIME:  200 #; ms between vacuum level checks, we think this is the faatest they go at
VAC_SHOULD_DROP_AMP:  false #; amp_sp to set if vacuum spike
VAC_SPIKE_DROP_AMP:  5 #; amp_sp to set if vacuum spike
VAC_MAX_LEVEL:  0.000000005 #5e-9; If vacuum level goes  above this, disable ramping 
WHEN_VAC_HI_DISABLE_RAMP: true #BOOL, flag for whether to disable ramping when vac_level is above VAC_MAX_LEVEL
VAC_SPIKE_TRACES_TO_SAVE:  
  - KLYSTRON_FORWARD_PHASE
  - KLYSTRON_REVERSE_PHASE
  - KLYSTRON_FORWARD_POWER
  - KLYSTRON_REVERSE_POWER
  - CAVITY_REVERSE_PHASE
  - CAVITY_FORWARD_PHASE
  - CAVITY_FORWARD_POWER
  - CAVITY_REVERSE_POWER
  #- CAVITY_PROBE_POWER
  #- CAVITY_PROBE_POWER

## DC parameters NOT Properly in, doesn't work for 100 Hz operation, needs to be added to gun CATAP c++ ... meh 
DC_PV:  EBT-INJ-SCOPE-01:P1 # Hmmm, add into gun LLRF monitoring???
DC_SPIKE_DELTA: 0.015 #
# Or TIMED if LEVEL then set DARK_CURRENT_SPIKE_DECAY_LEVEL
# if TIMED set VAC_SPIKE_DECAY_TIME
DC_DECAY_MODE: TIMED # STRING
DC_SPIKE_DECAY_LEVEL: 1.2 #
DC_SPIKE_DECAY_TIME: 2000 # INTEGER
DC_NUM_SAMPLES_TO_AVERAGE: 5 #
DC_CHECK_TIME: 1000 #; ms between vacuum level checks
DC_SHOULD_DROP_AMP: false # BOOL
DC_SPIKE_DROP_AMP: 6 #; INTEGER amp_sp to set if vacuum spike


##Temperature PVs TODO: WHAT IF WE WANT MORE THAN ONE OF THESE??? HOW WILL THEY BE DISPALYED IN THE GUI?
## ATM I will assume ONLY th efirts one will be dsiplayed, all will be written to the data log file ! (hopefully) 
CAVITY_TEMPERATURE_PV_COUNT: 1 # INTEGER to give number of water temperatures we are monitoring, 
CAVITY_TEMPERATURE_PV: [CLA-GUN-RF-LRRG-01:RT]
CAVITY_TEMPERATURE_CHECK_TIME:  1000 #;ms between getting new value

# (WATER_TEMPERATURE_PV_COUNT MUST match the number of entries in WATER_TEMPERATURE_PV
## ATM I will assume ONLY th efirts one will be dsiplayed, all will be written to the data log file ! (hopefully) 
WATER_TEMPERATURE_PV_COUNT: 2 # INTEGER to give number of water temperatures we are monitoring, WATER_TEMPERATURE_PV:  
WATER_TEMPERATURE_PV: [CLA-GUN-RF-LRRG-01:RT, CLA-GUN-RF-LRRG-02:RT]
WATER_TEMPERATURE_CHECK_TIME:  1000 # INTEGER ms between getting new values

## solenoid, THIS HAS TO CHANGE FROM APRIL 2019, as fo rthe linac we have two solenoids!! 
MAGNET_MACHINE_AREA: CLARA_PH1 # STRING
SOL_COUNT: 2 # a list of strings
SOL_NAMES: [L01-SOL1, L01-SOL2] # a list of strings
SOL_CHECK_TIME:  1000 # INTEGER ms
SHOULD_SOL_WOBBLE:  false
SOL_WOBBLE_HI:  0.0
SOL_WOBBLE_LO:  0.0

# the oscilllation time and number of points may reuslt in unrealistic solenoids wobbling
# (i.e to fast for the magnet to achieve)
SOL_WOBBLE_OSCILLATION_TIME: 100.0 # FLOAT seconds required for one complete  cycle
SOL_WOBBLE_OSCILLATION_POINTS: 0  # INTEGER, how many points to wobble solenoid per oscillation  

## vac_valve, MACHINE_AREA
VAC_VALVE_AREA: CLARA_PH1 # STRING
# value must match name of valve in CATAP to monitor, WHAT IF THERE IS MORE THAN ONE VALVE??? 
VAC_VALVE: S01-VALV-01
#VAC_VALVE:      # a list of strings ??? TODO
#  - S01-VALV-01  
VAC_VALVE_CHECK_TIME: 1000 # ms between getting new value!!!!
KEEP_VALVE_OPEN: false # should the valve be kept open or not?  

##gui
GUI_UPDATE_TIME: 1000 # INTEGER milliseconds

##modulator checking, We know which modulator from RF_STRUCTURE
MODULATOR_CHECK_TIME: 1000 #INTEGER ms

##rf protection checking, we knwo which RF_PROT from RF_STRUCTURE 
RF_PROT_CHECK_TIME: 1000 # INTEGER ms


##
##  ___  ____  _  _  ____  ____    __    __      __  __  _____  _  _  ____  ____  _____  ____  ____  _  _  ___   
## / __)( ___)( \( )( ___)(  _ \  /__\  (  )    (  \/  )(  _  )( \( )(_  _)(_  _)(  _  )(  _ \(_  _)( \( )/ __)  
##( (_-. )__)  )  (  )__)  )   / /(__)\  )(__    )    (  )(_)(  )  (  _)(_   )(   )(_)(  )   / _)(_  )  (( (_-.  
## \___/(____)(_)\_)(____)(_)\_)(__)(__)(____)  (_/\/\_)(_____)(_)\_)(____) (__) (_____)(_)\_)(____)(_)\_)\___/  
##                                                                                                               
##
## general monitoring PVs (THESE PVS ARE NOT DISPLAYED IN THE GUI, BUT ARE ADDED TO THE data.log)
## we're hacking this in at the end, so this is sketchyaf
## have the NAME of the PV with a suffix GMON_SUFFIX, then the PV,
## reader looks for suffixes '_GMON', chops suffixes and adds these paramters to the 
## data dictionary, 
## 
GMON_SUFFIX:  _GMON
PID_on_off_GMON :  CLA-GUN-H2O-PID-02:ON:RB
PID_set_point_GMON :  CLA-GUN-H2O-PID-02:SETVAL:RB
PID_output_GMON :  CLA-GUN-H2O-PID-02:OUTPUT:RB
PID_proportional_gain_GMON :  CLA-GUN-H2O-PID-02:PROP:RB
PID_integral_gain_GMON :  CLA-GUN-H2O-PID-02:INTG:RB
PID_derivative_gain_GMON :  CLA-GUN-H2O-PID-02:DERI:RB
PID_autotune_state_GMON :  CLA-GUN-H2O-PID-02:ATUNE:RB



